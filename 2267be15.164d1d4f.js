(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{146:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return h}));var i=n(0),a=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(r,".").concat(d)]||m[d]||b[d]||o;return n?a.a.createElement(h,l(l({ref:t},c),{},{components:n})):a.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},191:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/image1-e121f62130acf282e8f0e88675cc7b20.jpg"},74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var i=n(2),a=n(6),o=(n(0),n(146)),r={id:"final",title:"Final Project"},l={unversionedId:"assignments/final",id:"assignments/final",isDocsHomePage:!1,title:"Final Project",description:"* You are expected to work as a team of three.",source:"@site/docs\\assignments\\final.md",slug:"/assignments/final",permalink:"/cs220-sp21/docs/assignments/final",version:"current"},s=[{value:"Quick Links",id:"quick-links",children:[]},{value:"Learning Objectives",id:"learning-objectives",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Getting started",id:"getting-started",children:[{value:"Set up your final project git repository",id:"set-up-your-final-project-git-repository",children:[]},{value:"Get the starter codes from the public repository",id:"get-the-starter-codes-from-the-public-repository",children:[]}]},{value:"The Game",id:"the-game",children:[{value:"Chess Rules",id:"chess-rules",children:[]},{value:"Game Setup",id:"game-setup",children:[]},{value:"General Movement of Pieces",id:"general-movement-of-pieces",children:[]},{value:"Capture",id:"capture",children:[]},{value:"Special Movement of Pieces",id:"special-movement-of-pieces",children:[]},{value:"Checked Positions, Checkmate and End-of-Game Situations",id:"checked-positions-checkmate-and-end-of-game-situations",children:[]},{value:"Hints for Implementing Game Rules",id:"hints-for-implementing-game-rules",children:[]}]},{value:"User Interface",id:"user-interface",children:[{value:"Exception Handling",id:"exception-handling",children:[]}]},{value:"File Format for Loading/Saving Games",id:"file-format-for-loadingsaving-games",children:[]},{value:"Implementation Details",id:"implementation-details",children:[{value:"Piece Creation",id:"piece-creation",children:[]},{value:"Mystery Piece",id:"mystery-piece",children:[]},{value:"Customizing the Board Style Displayed in Interactive Output",id:"customizing-the-board-style-displayed-in-interactive-output",children:[]},{value:"General Requirements",id:"general-requirements",children:[]}]},{value:"Additional Deliverables",id:"additional-deliverables",children:[{value:"UML Diagram (Team)",id:"uml-diagram-team",children:[]},{value:"Git Log (Team)",id:"git-log-team",children:[]},{value:"README (Team)",id:"readme-team",children:[]}]},{value:"Code Submission (Team)",id:"code-submission-team",children:[]},{value:"Contributions Submission (Individual)",id:"contributions-submission-individual",children:[]}],c={rightToc:s};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(o.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(o.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"You are expected to work as a team of three."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Due dates:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Team code submission due ",Object(o.b)("strong",{parentName:"li"},"Friday ",Object(o.b)("strong",{parentName:"strong"},"April 30th")," at 11pm EDT (Baltimore time)")),Object(o.b)("li",{parentName:"ul"},"Individual contributions submission due ",Object(o.b)("strong",{parentName:"li"},"Sunday ",Object(o.b)("strong",{parentName:"strong"},"May 2nd")," at 11pm EDT (Baltimore time)")))),Object(o.b)("li",{parentName:"ul"},"No late days are allowed!")))),Object(o.b)("h2",{id:"quick-links"},"Quick Links"),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"#the-game"}),"Rules of Chess")),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"#implementation-details"}),"Implementation Details")),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"#code-submission-team"}),"Code Submission")),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"#additional-deliverables"}),"Additional Deliverables")),Object(o.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(o.b)("p",null,"This project is intended to allow you to utilize techniques we've learned\nthroughout the course, with a focus on object-oriented design in C++."),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"You will work in your three-person team to implement a version of the\nboard game chess in C++.  This is an exercise both in object-oriented\ndesign and in proper application of the programming techniques we\u2019ve\nlearned throughout the course.  A portion of your grade will be based\non the merits of your design, including reducing code duplication and\nmaximizing efficiency. Your code must be well documented and tested,\nwith all memory leaks eliminated."),Object(o.b)("h2",{id:"getting-started"},"Getting started"),Object(o.b)("h3",{id:"set-up-your-final-project-git-repository"},"Set up your final project git repository"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If you have registered your team on time, you will see the private repo\n(",Object(o.b)("inlineCode",{parentName:"p"},"2021-spring-final-<JHED1>-<JHED2>-<JHED3>"),") under your repositories on GitHub.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Otherwise, you should receive a private post from us about your\nassigned partners on Piazza. You should reply to the post to exchange your\ncontact information with your teammates and let us know all members are\nconnected. We will assign you the project repo. If you have not received\nthe post, reach out to us as soon as possible."))),Object(o.b)("p",null,"Once you have access to ",Object(o.b)("inlineCode",{parentName:"p"},"2021-spring-final-<JHED1>-<JHED2>-<JHED3>"),", you\nshould clone the repo to your ugrad unix account (and optionally local\nmachine) the same way you cloned your personal repo in ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/exercises/ex1-3#part-2"}),"Ex1-3 Part\n2"),"."),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"If you have opted to use ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/resources/github-ssh"}),"SSH authentication"),",\nremember to clone it with the ",Object(o.b)("inlineCode",{parentName:"p"},"git@")," link. Otherwise, you should use the\n",Object(o.b)("inlineCode",{parentName:"p"},"https://")," one."))),Object(o.b)("h3",{id:"get-the-starter-codes-from-the-public-repository"},"Get the starter codes from the public repository"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Use ",Object(o.b)("inlineCode",{parentName:"p"},"cd")," to move into the public repo folder on your unix account\n(e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"~/cs220-sp21-public"),"), type ",Object(o.b)("inlineCode",{parentName:"p"},"git status")," and confirm you have\nnot modified any files or accidentally committed to the public repo. Ask\nfor help if you need to undo those accidental changes.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Type ",Object(o.b)("inlineCode",{parentName:"p"},"git pull")," to synchronize your local repo with the remote repo.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"You should see a new folder ",Object(o.b)("inlineCode",{parentName:"p"},"final"),", which contains the starter\ncode and example files.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Copy the source files (",Object(o.b)("inlineCode",{parentName:"p"},".h")," and ",Object(o.b)("inlineCode",{parentName:"p"},".cpp"),") and text files (",Object(o.b)("inlineCode",{parentName:"p"},".txt"),") in ",Object(o.b)("inlineCode",{parentName:"p"},"final")," to your final\nproject repo. Assuming both the public repo and your final repo\nare under your home directory, and you have not changed the folder\nnames, then you can run ",Object(o.b)("inlineCode",{parentName:"p"},"cp ~/cs220-sp21-public/final/* ~/2021-spring-final-<JHED1>-<JHED2>-<JHED3>/"),"\nto copy the starter codes to your local final repo.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Use ",Object(o.b)("inlineCode",{parentName:"p"},"cd")," to move into your final repo\n(e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"~/2021-spring-final-<JHED1>-<JHED2>-<JHED3>"),"), type ",Object(o.b)("inlineCode",{parentName:"p"},"git status")," and\nconfirm you see all the starter files.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Do your first commit to add the starter codes to the repo and push them\nto the remote repo. You can run ",Object(o.b)("inlineCode",{parentName:"p"},"git add ."),", ",Object(o.b)("inlineCode",{parentName:"p"},'git commit -m "Initialized\nwith the starter codes"'),", and ",Object(o.b)("inlineCode",{parentName:"p"},"git push"),"."))),Object(o.b)("p",null,"Your final repo is now ready for development!"),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(o.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Only one of the team members needs to set up the repo when it is the\nfirst use. Once it has been set up, the partners can get the starter code\ndirectly by cloning the remote repo or synchronizing their local repos\n(",Object(o.b)("inlineCode",{parentName:"p"},"pull"),")."),Object(o.b)("p",{parentName:"div"},"You now work in a team. You may encounter ",Object(o.b)("strong",{parentName:"p"},"conflicts")," more often when\nyou push your code from local to remote. This happens when your teammates\nhave changed the same files and same segments as you have done. If it\nhappens, you will need to resolve the conflicts, compile and test your\ncodes before committing the conflict-resolved version. Typically you\nwill see something like below in the file that has a conflict:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"<<<<<<< HEAD\nThis is how the file in the current remote (github) repo looks\n\n=======\nThis is how the file in your local repo looks\n\n>>>>>>> <a commit id>\n")),Object(o.b)("p",{parentName:"div"},"To resolve the conflict, you need to decide which version to use or how\nthey should be merged. To minimize the conflicts, you should"),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"Communicate with your teammates to avoid editing a file at the same time,"),Object(o.b)("li",{parentName:"ul"},"Always sync with the remote repo before you start working, and "),Object(o.b)("li",{parentName:"ul"},"Commit and push often")))),Object(o.b)("h2",{id:"the-game"},"The Game"),Object(o.b)("h3",{id:"chess-rules"},"Chess Rules"),Object(o.b)("p",null,"A description of the official rules of chess can be found\n",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://www.chess.com/learn-how-to-play-chess"}),"here"),", but we give\nthe main points of the game below, with some adjustments specific to\nthis project."),Object(o.b)("h3",{id:"game-setup"},"Game Setup"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The board is a single 2D 8 x 8 grid."),Object(o.b)("li",{parentName:"ul"},"There are two players, a white player and a black player.  "),Object(o.b)("li",{parentName:"ul"},"The board is always oriented so that the starting position of the\nwhite player\u2019s pieces is at the bottom, and the starting position of the\nblack player\u2019s pieces is at the top."),Object(o.b)("li",{parentName:"ul"},"There are six types of pieces in chess: king (often denoted with K or\nk), queen (Q/q), bishop (B/b), knight (N/n), rook (R/r) and pawn (P/p).\nUpper-case letters denote the white player's pieces, while lower-case\nletters denote the black player's pieces."),Object(o.b)("li",{parentName:"ul"},"Each player begins the game with 1 king, 1 queen, 2 bishops, 2 knights, 2 rooks, and 8 pawns. "),Object(o.b)("li",{parentName:"ul"},"At the start of the game, pieces are placed\n",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://www.chess.com/article/view/how-to-set-up-a-chessboard"}),"as shown here"),"."),Object(o.b)("li",{parentName:"ul"},"The white player starts the game by making the first move, then players\nalternate moves until the game ends.")),Object(o.b)("h3",{id:"general-movement-of-pieces"},"General Movement of Pieces"),Object(o.b)("p",null,"When it is his or her turn, a player may move exactly ONE of his or her\npieces according to the following movement rules, provided that"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"the piece does not land on a square already occupied by another piece\nbelonging to that ",Object(o.b)("em",{parentName:"li"},"same")," player, and"),Object(o.b)("li",{parentName:"ol"},"the move does not cause the player to enter a ",Object(o.b)("em",{parentName:"li"},"checked")," position (defined below).")),Object(o.b)("p",null,"Movement rules:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A king may move in any direction including diagonally, but may only move one square."),Object(o.b)("li",{parentName:"ul"},"A queen may move any number of spaces in one direction, including\ndiagonally. A queen may not move through other pieces."),Object(o.b)("li",{parentName:"ul"},"A bishop may move diagonally only, but may move any number of spaces. A bishop may not move through other pieces."),Object(o.b)("li",{parentName:"ul"},"A knight may move in an\n",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Knight_(chess)#Movement"}),"L-shape"),",\nof length either two-by-one or one-by-two. The knight is the only\npiece that is not stopped by other pieces in its way (i.e. it ",Object(o.b)("em",{parentName:"li"},"can"),"\nmove through other pieces to get to an open square)."),Object(o.b)("li",{parentName:"ul"},"A rook may move any number of squares, but only along a horizontal or\nvertical line on the board. A rook may not move through other pieces."),Object(o.b)("li",{parentName:"ul"},"A pawn can move only forward towards the opponent\u2019s side of the\nboard, but with restrictions. On its first move of the game, a pawn may\nmove forward either one or two squares; on subsequent moves, a pawn may\nonly move forward one square. A pawn may not move through other pieces.\nFurthermore, the pawn may not use a forward move to land in a square that\nis occupied by any player\u2019s piece.  In a separate type of action,\na pawn may make a special move to \u201ccapture\u201d an opponent piece\n(discussed below). (Finally, in official chess, the pawn sometimes has\nanother move option called ",Object(o.b)("em",{parentName:"li"},"en passant"),". This is a fairly advanced rule,\nand we won't implement it in our game.)")),Object(o.b)("p",null,"The rules are also summarized in the following image. Note that the pawn\nhas distinct ways of moving (x's) and capturing (circles):"),Object(o.b)("p",null,Object(o.b)("img",{alt:"chess moves",src:n(191).default})),Object(o.b)("p",null,"From: ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://alchetron.com/Tron/CHESS-The-Games-for-the-Brain-576-UW#-"}),"https://alchetron.com/Tron/CHESS-The-Games-for-the-Brain-576-UW#-")),Object(o.b)("h3",{id:"capture"},"Capture"),Object(o.b)("p",null,"If any piece other than a pawn moves according to the movement rules\nabove, and ends up in a square occupied by a piece owned by the opposing\nplayer, then the opponent\u2019s piece is \u201ccaptured\u201d and removed from\nthe board for the remainder of the game."),Object(o.b)("p",null,"Pawns have different shapes for normal movement versus for capturing.\nPawn ",Object(o.b)("em",{parentName:"p"},"movement")," is always forward (one or two squares, depending\non the original position), whereas ",Object(o.b)("em",{parentName:"p"},"pawn capturing")," is always diagonal.\nSee ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Pawn_(chess)#Capturing"}),"here"),"."),Object(o.b)("h3",{id:"special-movement-of-pieces"},"Special Movement of Pieces"),Object(o.b)("p",null,"During gameplay, if a pawn ever reaches the last row of\nthe board (the opposite side from its starting position), it\nimmediately becomes a queen.  This is called piece promotion. ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Pawn_(chess)#Promotion"}),"See\nhere"),". (Actually,\nin standard chess, the player who owns the pawn gets to select to what\ntype of piece he or she wishes to upgrade, but nearly everyone selects\nqueen, so we'll just make that the requirement.)"),Object(o.b)("p",null,"In standard chess, players are also permitted two special moves\nnamed ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Castling"}),"castling")," and ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Pawn_(chess)#Capturing"}),"en\npassant"),". In\nthis project, these moves are explicitly disallowed. (They are quite\ncomplicated to implement.)"),Object(o.b)("h3",{id:"checked-positions-checkmate-and-end-of-game-situations"},"Checked Positions, Checkmate and End-of-Game Situations"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If a king is ever threatened by any piece of the opposing player in such\na way that a single move by the opponent could result in the king\u2019s\nimmediate capture, this is considered a ",Object(o.b)("em",{parentName:"li"},"checked position"),". Getting\nout of a checked position is the highest priority for the player who\nis checked \u2014 while a player is in a checked position, his or her only\noption is to make a move that gets the king out of danger; no other move\nis permitted. (This can be done either by moving the king out of check\nor blocking the check with another piece or capturing the checking piece\nof the opponent.)"),Object(o.b)("li",{parentName:"ul"},"No player is permitted to make a move that places himself or herself\nin a checked position. This includes a player moving his or her king\ninto danger, but also includes moving out of the way a piece which had\nbeen sheltering the king, leaving the king unprotected. This rule means\nthat a player can only be checked by a move made by the opposing player."),Object(o.b)("li",{parentName:"ul"},"If a player is checked, and the checked player has no way of removing\nthe check condition, this is called a ",Object(o.b)("em",{parentName:"li"},"checkmate"),", and the checking\nplayer is declared the winner of the game. The overall goal of a player\nis thus to checkmate the opposing player."),Object(o.b)("li",{parentName:"ul"},"If any player is not in a checked position but has no legal moves\navailable, the game is declared a stalemate. The game ends without\na winner.")),Object(o.b)("h3",{id:"hints-for-implementing-game-rules"},"Hints for Implementing Game Rules"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"make_move")," member function in the ",Object(o.b)("inlineCode",{parentName:"p"},"Game")," class is required to\ndetermine whether or not the move being proposed is legal."),Object(o.b)("p",null,"One important aspect of determining whether a move is legal is checking\nwhether the move would place the player's king in check.  One fairly\nstraightforward way to do this is to create a copy of the current\ngame state (i.e., a replica ",Object(o.b)("inlineCode",{parentName:"p"},"Game")," object), carry out the proposed move,\nand then determine whether the player's king is in check in the replica.\nThis approach avoids the need to implement special-purpose logic to\ndetermine whether the player's king ",Object(o.b)("em",{parentName:"p"},"would be")," in check."),Object(o.b)("h2",{id:"user-interface"},"User Interface"),Object(o.b)("p",null,"To launch the program, the user will type ",Object(o.b)("inlineCode",{parentName:"p"},"./chess")," at the command line,\noptionally followed by a filename command-line argument. Upon completion\nof the game (checkmate or stalemate) or if the user elects to quit playing\na game that hasn't ended yet, the current status of the game is output\nto the specified file. If no filename is specified, no output is written\nand no output file is created."),Object(o.b)("p",null,"Once the program is running, a chess game using the default chess board\nis created, and the user is presented with a list of possible actions\nas follows:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"? \u2014 display the list of actions"),Object(o.b)("li",{parentName:"ul"},"Q \u2014 quit the game"),Object(o.b)("li",{parentName:"ul"},"L ","<","filename",">"," \u2014 load a game from the specified file"),Object(o.b)("li",{parentName:"ul"},"S ","<","filename",">"," \u2014 save the current game to the specified file"),Object(o.b)("li",{parentName:"ul"},"M ","<","move",">"," \u2014 try to make the specified move, where ","<","move",">","\nis a four-character string giving the column ('A'-'H') and row ('1'-'8')\nof the start position, followed by the column and row of the end position")),Object(o.b)("p",null,"Prior to the user selecting an action, the current state of the board is\npresented to the user on standard output. The user can repeatedly enter\none of the above action specifiers until the program ends, which happens\nwhen the game reaches checkmate or stalemate, or the user elects to quit."),Object(o.b)("h3",{id:"exception-handling"},"Exception Handling"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"make_move")," member function of the ",Object(o.b)("inlineCode",{parentName:"p"},"Game")," class is responsible for\ncarrying out a move specified by the user."),Object(o.b)("p",null,"If the requested move is illegal (according to the game rules described above),\n",Object(o.b)("inlineCode",{parentName:"p"},"make_move")," should throw an ",Object(o.b)("inlineCode",{parentName:"p"},"Exception"),".  (",Object(o.b)("inlineCode",{parentName:"p"},"Exception")," is an exception class\ndefined in ",Object(o.b)("inlineCode",{parentName:"p"},"Exceptions.h"),".)  When an exception is thrown, use code of\nthe following form:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-cpp"}),"throw Exception(message);\n")),Object(o.b)("p",null,"where ",Object(o.b)("inlineCode",{parentName:"p"},"message")," is one of the following messages:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"start position is not on board\nend position is not on board\nno piece at start position\npiece color and turn do not match\nillegal move shape\ncannot capture own piece\nillegal capture shape\npath is not clear\nmove exposes check\n")),Object(o.b)("p",null,"In ",Object(o.b)("inlineCode",{parentName:"p"},"main.cpp"),", you will note a ",Object(o.b)("inlineCode",{parentName:"p"},"TODO")," comment where the ",Object(o.b)("inlineCode",{parentName:"p"},"make_move")," member\nfunction is called.  You should add exception handling code using\n",Object(o.b)("inlineCode",{parentName:"p"},"try")," and ",Object(o.b)("inlineCode",{parentName:"p"},"catch")," so that if ",Object(o.b)("inlineCode",{parentName:"p"},"make_move")," throws an ",Object(o.b)("inlineCode",{parentName:"p"},"Exception"),", an error\nmessage of the form"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"Could not make move: message\n")),Object(o.b)("p",null,"is printed to ",Object(o.b)("inlineCode",{parentName:"p"},"std::cerr"),", where ",Object(o.b)("inlineCode",{parentName:"p"},"message")," is one of the error messages listed above.\n",Object(o.b)("strong",{parentName:"p"},"Important"),": make sure that the error message is printed ",Object(o.b)("em",{parentName:"p"},"exactly"),"\nas specified above."),Object(o.b)("p",null,"An attempt to make an illegal move should not change the game state in any\nway.  So, if an illegal move is entered, the exception thrown by\n",Object(o.b)("inlineCode",{parentName:"p"},"make_move")," is caught and handled (by printing the error message),\nand the user will have an opportunity to continue the game by entering\na legal move."),Object(o.b)("h2",{id:"file-format-for-loadingsaving-games"},"File Format for Loading/Saving Games"),Object(o.b)("p",null,"The format of a file specifying a game contains nine lines. The first\neight lines in the file indicate the contents of row 8 down through row 1.\nIn each of these first 8 rows, there are 8 characters present before\na newline, one character per column from 'A' through 'H'.  The special\nsymbol '-' is used to denote an empty location on the board, while the\nstandard single-character piece designators represent each piece present\non the board. Finally, on the ninth line, there is a single character\nwhich is one of 'w' or 'b', where 'w' denotes the white player and 'b'\ndenotes the black player. For files representing in-progress games,\nthis character indicates which player's turn is next, but in the case\nof a game that has reached checkmate or stalemate, the letter on the\nninth line will indicate the player whose turn it was when the game ended."),Object(o.b)("p",null,"In your code, you can assume that all load files are well-formed, except\nthey might fail the ",Object(o.b)("inlineCode",{parentName:"p"},"has_valid_kings")," test called by main."),Object(o.b)("p",null,"In the public course repository's ",Object(o.b)("inlineCode",{parentName:"p"},"final")," directory, we have\nprovided several example files (",Object(o.b)("inlineCode",{parentName:"p"},"stalemate.txt"),", ",Object(o.b)("inlineCode",{parentName:"p"},"checkmate.txt"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"check.txt"),") illustrating different important game situations. Your\nprogram should be able to load in these files and report the conditions\nthey represent."),Object(o.b)("p",null,"Additionally, we have supplied you with several files (",Object(o.b)("inlineCode",{parentName:"p"},"mate_in_two.txt"),"\nand ",Object(o.b)("inlineCode",{parentName:"p"},"promotion_to_mate.txt"),") indicating series of moves that a user\nmight enter interactively while running the program. (The additional file\n",Object(o.b)("inlineCode",{parentName:"p"},"pre_promotion.txt")," is utilized if commands in ",Object(o.b)("inlineCode",{parentName:"p"},"promotion_to_mate.txt"),"\nare executed.) You are encouraged to use ",Object(o.b)("inlineCode",{parentName:"p"},"cat")," and the Unix pipe operator\n(",Object(o.b)("inlineCode",{parentName:"p"},"|"),") to run these commands from the command line and then to check your\nprogram's output. You should also, of course, create and utilize other\ntests as you are developing your code."),Object(o.b)("h2",{id:"implementation-details"},"Implementation Details"),Object(o.b)("p",null,"In the public course repository's ",Object(o.b)("inlineCode",{parentName:"p"},"final")," directory, we have\nsupplied you with the following starter files, at the top of which you\nmust add comments giving the names and JHED IDs of each of your team members,\nand which you may further modify as needed except where indicated:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Piece.h")," (do not modify this file) \u2014 contains the definition of an\nabstract class named ",Object(o.b)("inlineCode",{parentName:"li"},"Piece")," which represents a chess piece. This class\nis fully implemented in ",Object(o.b)("inlineCode",{parentName:"li"},"Piece.h")," (so there is no need for a file named\n",Object(o.b)("inlineCode",{parentName:"li"},"Piece.cpp"),"). It contains two pure virtual functions which will need to\nbe implemented in each subclass of ",Object(o.b)("inlineCode",{parentName:"li"},"Piece"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"King.h"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Queen.h"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Rook.h"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Knight.h"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Bishop.h"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Pawn.h")," \u2014\ncontain, respectively, class definitions of subclasses of ",Object(o.b)("inlineCode",{parentName:"li"},"Piece"),"\nrepresenting various specific chess pieces. You may modify these files as\nneeded, including by changing the stub (incomplete) function definition\nfor ",Object(o.b)("inlineCode",{parentName:"li"},"legal_move_shape")," in each header into a declaration, overriding\n",Object(o.b)("inlineCode",{parentName:"li"},"legal_capture_shape")," in classes where appropriate, or adding additional\nmember functions, so you can fully implement each function properly in\nits associated ",Object(o.b)("inlineCode",{parentName:"li"},".cpp")," file.  ",Object(o.b)("strong",{parentName:"li"},"Important"),": You will need to create\na ",Object(o.b)("inlineCode",{parentName:"li"},".cpp")," file for each subclass of ",Object(o.b)("inlineCode",{parentName:"li"},"Piece"),".  The provided ",Object(o.b)("inlineCode",{parentName:"li"},"Makefile"),"\nwill not work fully until all of the ",Object(o.b)("inlineCode",{parentName:"li"},".cpp")," files have been created.\nAt a minimum, you should implement each ",Object(o.b)("inlineCode",{parentName:"li"},"Piece")," subclass's\n",Object(o.b)("inlineCode",{parentName:"li"},"legal_move_shape")," member function in its ",Object(o.b)("inlineCode",{parentName:"li"},".cpp")," file (which means you\nshould remove the stub version in the ",Object(o.b)("inlineCode",{parentName:"li"},".h")," file.)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Board.h")," \u2014 contains the class definition of a class named ",Object(o.b)("inlineCode",{parentName:"li"},"Board"),"\nwhich represents a chess board. Some of the implementations of these\nmember functions are left to you to flesh out in ",Object(o.b)("inlineCode",{parentName:"li"},"Board.cpp"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Board.cpp")," \u2014 contains the implementation of ",Object(o.b)("inlineCode",{parentName:"li"},"Board"),"'s ",Object(o.b)("inlineCode",{parentName:"li"},"<<")," operator\n(do not modify this implementation), which will be used in the autograder.\nAlso contains stubs for many member functions declared in ",Object(o.b)("inlineCode",{parentName:"li"},"Board.h"),", which you\nwill need to replace with fully functioning code. Note that the ",Object(o.b)("inlineCode",{parentName:"li"},"display"),"\nmember function is a place where you may be creative, including making use of\n",Object(o.b)("inlineCode",{parentName:"li"},"Terminal.h")," as described below."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Game.h")," \u2014 contains the class definition of a class named ",Object(o.b)("inlineCode",{parentName:"li"},"Game"),"\nrepresenting a chess game, as well as two declarations for overloaded\noperators related to ",Object(o.b)("inlineCode",{parentName:"li"},"Game"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Game.cpp")," \u2014 contains the implementations of a default constructor\n(do not modify this implementation) and ",Object(o.b)("inlineCode",{parentName:"li"},"Game"),"'s ",Object(o.b)("inlineCode",{parentName:"li"},"<<")," operator (do not\nmodify this implementation). Also contains stubs for many member functions declared\nin ",Object(o.b)("inlineCode",{parentName:"li"},"Game.h"),", which you will need to replace with fully functioning code."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"main.cpp")," \u2014 contains the basic game loop. You will need to modify the\n",Object(o.b)("inlineCode",{parentName:"li"},"main")," function so that exception handling is used to detect and recover\nfrom attempts to make an illegal move.  See the\n",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"#exception-handling"}),"Exception Handling")," section."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Mystery.h")," (there is no need to hand in this file; we'll be modifying\nit when we grade) \u2014 contains dummy code for a subclass of Piece which\nwill be replaced after submission by the graders. You won't use this\nfile in a standard chess game, but we will as we grade your code, to\nensure you're taking full advantage of virtual functions and dynamic\nbinding in your design. See the Mystery Piece section below for details."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CreatePiece.h "),"(do not modify this file), ",Object(o.b)("inlineCode",{parentName:"li"},"CreatePiece.cpp "),"(do not\nmodify this file) \u2014 contains code that allows us to generate pieces from\ntheir ASCII representation. We include a Mystery piece as an option here."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Terminal.h")," (do not modify this file) \u2014 contains helper functions which\nallow you to change the background and foreground colors of output to\nstandard out. You may optionally use these functions as you write your\ncustom ",Object(o.b)("inlineCode",{parentName:"li"},"Board::display")," member function."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Makefile")," \u2014 this is a complete ",Object(o.b)("inlineCode",{parentName:"li"},"Makefile")," for you to use.  You should\nnot need to modify it.")),Object(o.b)("p",null,"Note that all classes are in the ",Object(o.b)("inlineCode",{parentName:"p"},"Chess")," namespace."),Object(o.b)("p",null,"You must additionally create the following files:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"King.cpp"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Queen.cpp"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Rook.cpp"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Knight.cpp"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Bishop.cpp"),",\n",Object(o.b)("inlineCode",{parentName:"li"},"Pawn.cpp")," \u2014  contain implementations of constructors and various\nfunctions in the respective header files, which are not given in the\nclass definition itself. As always, only short (i.e. one-line) function\ndefinitions should appear inside .h files; the rest should be given in\n",Object(o.b)("inlineCode",{parentName:"li"},".cpp")," files.")),Object(o.b)("h3",{id:"piece-creation"},"Piece Creation"),Object(o.b)("p",null,"We include completed code in ",Object(o.b)("inlineCode",{parentName:"p"},"CreatePiece.h")," and ",Object(o.b)("inlineCode",{parentName:"p"},"CreatePiece.cpp"),"\nwhich will allow you to create pieces of various types to put them on\nthe board at a specified location. While you will not need to modify\nthis code, it may be helpful to review it to try to get a sense of\nhow it functions. We deliberately made the constructors of the ",Object(o.b)("inlineCode",{parentName:"p"},"Piece"),"\nclass protected and the different ",Object(o.b)("inlineCode",{parentName:"p"},"Piece")," subclasses private, so you\ncannot accidentally construct a raw ",Object(o.b)("inlineCode",{parentName:"p"},"Piece")," object \u2014 all construction\nmust happen through the ",Object(o.b)("inlineCode",{parentName:"p"},"create_piece "),"function. (See, for example,\nthe implementation of ",Object(o.b)("inlineCode",{parentName:"p"},"Board::add_piece"),".) In other words, ",Object(o.b)("inlineCode",{parentName:"p"},"Piece"),"\nis an ",Object(o.b)("em",null,"abstract base class"),"."),Object(o.b)("p",null,"In order to load a saved game from a file, you'll want to read in\nthe information from the file and make repeated appropriate calls\nto ",Object(o.b)("inlineCode",{parentName:"p"},"Board::add_piece"),", which will call ",Object(o.b)("inlineCode",{parentName:"p"},"create_piece")," from code in\n",Object(o.b)("inlineCode",{parentName:"p"},"CreatePiece.h/.cpp"),". Be sure that your game loading mechanism is equipped\nto handle mystery pieces, as discussed in the next section."),Object(o.b)("h3",{id:"mystery-piece"},"Mystery Piece"),Object(o.b)("p",null,'To illustrate the power of dynamic dispatch in interfacing with existing\ncode, we will compile your code with our additional code to add a "mystery\npiece" to the chess game. This piece does not exist in the current design\nwhen a game is created with a default constructor, but when a game is\nloaded from a file, any ',Object(o.b)("inlineCode",{parentName:"p"},"M")," or ",Object(o.b)("inlineCode",{parentName:"p"},"m")," designator present indicates that a\nmystery piece is to be placed on the board. In the starter code, there is\na stub of a ",Object(o.b)("inlineCode",{parentName:"p"},"Mystery")," class given to you. At grading time, however, this\ncode will be replaced with a more interesting version of the ",Object(o.b)("inlineCode",{parentName:"p"},"Mystery"),"\nclass. This piece will move in some way which is as yet unspecified,\nbut your implementation should be able to handle its workings, no matter\nits movement pattern. You'll need to use the common ",Object(o.b)("inlineCode",{parentName:"p"},"Piece")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Board"),"\nmember functions to make sure that your code can handle this type of piece."),Object(o.b)("p",null,"You may assume that the mystery piece with which we'll grade your\ncode will include definitions of the member functions supplied to you in the\nstarter code.  The definitions will be different than what you have\nbeen given, but there will be definitions. Additionally, you may assume\nthat if the mystery piece's legal move shape is along a straight line\n(either horizontal, vertical, or diagonal), it will not be permitted\nto move through pieces. Furthermore, if the mystery piece's legal move\nshape is NOT along a straight line, it will always be permitted to move\nthrough pieces. Create your own ",Object(o.b)("inlineCode",{parentName:"p"},"Mystery")," piece class for testing\npurposes. For example, a mystery piece could be one that could move in\na 2x3 or 3x2 L-shape (mimicking what Knight can do, but with moves that\ncan cover more ground)."),Object(o.b)("p",null,"You should assume that the full definition of the ",Object(o.b)("inlineCode",{parentName:"p"},"Mystery")," piece\nclass will be specified in some file named ",Object(o.b)("inlineCode",{parentName:"p"},"Mystery.h"),". When we grade,\nwe'll supply a new version of ",Object(o.b)("inlineCode",{parentName:"p"},"Mystery.h")," to replace the ",Object(o.b)("inlineCode",{parentName:"p"},"Mystery.h"),"\nfile we released to you, and your ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile")," should already be set\nup to compile it. In your ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile"),", do not expect any file called\n",Object(o.b)("inlineCode",{parentName:"p"},"Mystery.cpp"),". Furthermore, you need not submit the released ",Object(o.b)("inlineCode",{parentName:"p"},"Mystery.h"),"\nto Gradescope."),Object(o.b)("h3",{id:"customizing-the-board-style-displayed-in-interactive-output"},"Customizing the Board Style Displayed in Interactive Output"),Object(o.b)("p",null,"The provided file ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal.h")," contains helper functions which allow you\nto change the background and foreground colors of output to standard\nout, e.g. in your ",Object(o.b)("inlineCode",{parentName:"p"},"Board::display")," member function. You can use any of the\nvalues of the ",Object(o.b)("inlineCode",{parentName:"p"},"Color")," enum found in ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal.h")," for both foreground\nand background colors. Foreground colors also have the option of being\n\u2018",Object(o.b)("inlineCode",{parentName:"p"},"bright"),"\u2019, which means you effectively have even more foreground\ncolors at your disposal. Use ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal::color_fg")," to set the foreground\ncolor and its bright flag. Use ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal::color_bg")," to set the background\ncolour. ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal::color_all")," allows setting both colors at once, and\n",Object(o.b)("inlineCode",{parentName:"p"},"Terminal::set_defaults")," resets you to the normal text colors once\nyou\u2019re done printing your board."),Object(o.b)("p",null,"Here's an example of how you might call the functions using the\n",Object(o.b)("inlineCode",{parentName:"p"},"Color")," enum defined in ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal.h"),". Note that since the functions\nin ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal.h")," are static, we call them using the ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal::")," prefix\n(rather than on an object). And similarly, since ",Object(o.b)("inlineCode",{parentName:"p"},"RED")," is constant defined\nin ",Object(o.b)("inlineCode",{parentName:"p"},"Terminal.h"),", we have to prefix it as well. After setting the colors,\nwriting to the display normally using ",Object(o.b)("inlineCode",{parentName:"p"},"std::cout")," will make use of the\ncurrent color setting."),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-cpp"}),'Terminal::color_fg(true, Terminal::RED);\ncout << "some stuff to print" << endl;\nTerminal::set_default();\n')),Object(o.b)("p",null,"You may use any ASCII characters to display your board on standard out,\nand you should be creative in writing ",Object(o.b)("inlineCode",{parentName:"p"},"Board::display"),". Keep usability\nin mind when you design your board, and remember, you may not modify\nthe definitions of the ",Object(o.b)("inlineCode",{parentName:"p"},"<<")," operator in ",Object(o.b)("inlineCode",{parentName:"p"},"Board")," or ",Object(o.b)("inlineCode",{parentName:"p"},"Game"),"."),Object(o.b)("h3",{id:"general-requirements"},"General Requirements"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"You may use ",Object(o.b)("inlineCode",{parentName:"li"},"std::cin"),", ",Object(o.b)("inlineCode",{parentName:"li"},"std::cout"),", ",Object(o.b)("inlineCode",{parentName:"li"},"std::ifstream"),", ",Object(o.b)("inlineCode",{parentName:"li"},"std::ofstream"),",\nthe insertion operator (",Object(o.b)("inlineCode",{parentName:"li"},"<<"),") and the extraction operator (",Object(o.b)("inlineCode",{parentName:"li"},">>"),")\nfor all input and output.  Don't use ",Object(o.b)("inlineCode",{parentName:"li"},"printf"),", ",Object(o.b)("inlineCode",{parentName:"li"},"scanf")," or other C I/O\nfunctions."),Object(o.b)("li",{parentName:"ul"},"Your program should only use ",Object(o.b)("inlineCode",{parentName:"li"},"new")," and ",Object(o.b)("inlineCode",{parentName:"li"},"delete")," for dynamic memory\nallocation and deallocation. You may not make direct use of C functions\nlike ",Object(o.b)("inlineCode",{parentName:"li"},"malloc"),", ",Object(o.b)("inlineCode",{parentName:"li"},"calloc"),", or ",Object(o.b)("inlineCode",{parentName:"li"},"free"),"."),Object(o.b)("li",{parentName:"ul"},"You are expected to factor your code into functions, each function\nperforming a distinct task.  Don't do everything in one giant function."),Object(o.b)("li",{parentName:"ul"},"All variables must be declared inside functions. No variables may be global or ",Object(o.b)("inlineCode",{parentName:"li"},"extern"),"."),Object(o.b)("li",{parentName:"ul"},"You should only provide implementations of functions in a ",Object(o.b)("inlineCode",{parentName:"li"},".h")," file if\nthe implementation is ",Object(o.b)("em",null,"very")," simple. Otherwise, you can change the\ndefinition to a prototype in the ",Object(o.b)("inlineCode",{parentName:"li"},".h")," file, and give its definition in\nan appropriately-named ",Object(o.b)("inlineCode",{parentName:"li"},".cpp")," file."),Object(o.b)("li",{parentName:"ul"},"You may not use the ",Object(o.b)("inlineCode",{parentName:"li"},"auto")," keyword."),Object(o.b)("li",{parentName:"ul"},"You must use header guards in all header (",Object(o.b)("inlineCode",{parentName:"li"},".h"),") files."),Object(o.b)("li",{parentName:"ul"},"You may not use ",Object(o.b)("inlineCode",{parentName:"li"},"using")," in header (",Object(o.b)("inlineCode",{parentName:"li"},".h"),") files."),Object(o.b)("li",{parentName:"ul"},"In C++ source (",Object(o.b)("inlineCode",{parentName:"li"},".cpp"),') files, you may import individual symbols using\nstatements like "',Object(o.b)("inlineCode",{parentName:"li"},"using std::string"),'".  But you may ',Object(o.b)("em",null,"not"),' use\n"',Object(o.b)("inlineCode",{parentName:"li"},"using namespace <id>"),'", either in headers or in source files.'),Object(o.b)("li",{parentName:"ul"},"You are expected to make use of ",Object(o.b)("strong",null,"gdb")," to debug and also\nto run ",Object(o.b)("strong",null,"valgrind")," to make sure there is no memory leakage\nor invalid memory usage."),Object(o.b)("li",{parentName:"ul"},"Each source file you submit should contain several comment lines at\nthe top giving the names and JHEDs of each member of your project team."),Object(o.b)("li",{parentName:"ul"},"You are encouraged to begin submitting your work well before the\ndeadline, keeping in mind that there are no late days available for use\nwith this group assignment.")),Object(o.b)("h2",{id:"additional-deliverables"},"Additional Deliverables"),Object(o.b)("h3",{id:"uml-diagram-team"},"UML Diagram (Team)"),Object(o.b)("p",null,"Create a simplified UML diagram that represents all the classes and\ntheir relationships in this final project. Use the format of the\nexamples in the day34 OO Design & UML Diagrams lesson. Here, each\nclass name should appear in a rectangle. Use arrows from each derived\nclass to its base class to indicate an inheritance relationship. Use\ndiamonds at each containing class with a line to the class it\ncontains."),Object(o.b)("p",null,"We strongly recommend creating the UML diagram ",Object(o.b)("em",{parentName:"p"},"before writing any\ncode")," to help yourselves visualize and keep track of this large class\nhierarchy. You can create your diagram with any common document\nprogram such as Microsoft Word, PowerPoint or Google\nDocs. (Handwritten diagrams are not acceptable.) You must save and\nsubmit your UML diagram in pdf form, named ",Object(o.b)("inlineCode",{parentName:"p"},"chessUML.pdf"),"."),Object(o.b)("h3",{id:"git-log-team"},"Git Log (Team)"),Object(o.b)("p",null,"You must create for this project a shared git repository to which all\nteam members have access. (For this project, you may not use the personal\ngit repository created by an individual team member for this class.) In\nthis new shared repository, use ",Object(o.b)("inlineCode",{parentName:"p"},"git add"),", ",Object(o.b)("inlineCode",{parentName:"p"},"git commit")," and ",Object(o.b)("inlineCode",{parentName:"p"},"git push"),"\nregularly. Use ",Object(o.b)("inlineCode",{parentName:"p"},"git commit")," and meaningful comments to document your\nwork and share it with your teammates.  Each person should be committing\ntheir work; it shouldn't be the case that the same team member is always\nperforming the commits for your team."),Object(o.b)("p",null,"Your submission must include a copy of the output of ",Object(o.b)("inlineCode",{parentName:"p"},"git log")," showing\nat least ",Object(o.b)("em",{parentName:"p"},"six")," commits to the repository by each team member. (You're\nlikely to have significantly more than that!) Save the ",Object(o.b)("inlineCode",{parentName:"p"},"git log")," output\ninto a file called ",Object(o.b)("inlineCode",{parentName:"p"},"gitlog.txt")," (e.g. by doing ",Object(o.b)("inlineCode",{parentName:"p"},"git log > gitlog.txt"),")."),Object(o.b)("h3",{id:"readme-team"},"README (Team)"),Object(o.b)("p",null,"Create a file called ",Object(o.b)("inlineCode",{parentName:"p"},"README")," (not ",Object(o.b)("inlineCode",{parentName:"p"},"README.txt")," or ",Object(o.b)("inlineCode",{parentName:"p"},"README.md"),", etc \u2014\njust ",Object(o.b)("inlineCode",{parentName:"p"},"README"),") including information described below. Your ",Object(o.b)("inlineCode",{parentName:"p"},"README"),"\nmust include:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A section titled \u2018TEAM\u2019 which lists each team participant\u2019s name and JHED id"),Object(o.b)("li",{parentName:"ul"},"A section titled \u2018DESIGN\u2019 which gives a brief explanation of overall design"),Object(o.b)("li",{parentName:"ul"},"A section titled \u2018COMPLETENESS\u2019 which indicates how complete your\nsolution is (i.e. are you aware of any missing/incorrect functionality?)."),Object(o.b)("li",{parentName:"ul"},"An optional section titled \u2018SPECIAL INSTRUCTIONS\u2019 which indicates\nhow we should run your code. (Hopefully this is not necessary \u2014 if it\nis, you may lose points per the requirements above.)"),Object(o.b)("li",{parentName:"ul"},"An optional section titled \u2018OTHER\u2019 which gives the graders any\nadditional information you want the graders to know about your submission.")),Object(o.b)("h2",{id:"code-submission-team"},"Code Submission (Team)"),Object(o.b)("p",null,"Create a zip file named ",Object(o.b)("inlineCode",{parentName:"p"},"project.zip")," containing your source files as\nwell as ",Object(o.b)("inlineCode",{parentName:"p"},"chessUML.pdf"),", ",Object(o.b)("inlineCode",{parentName:"p"},"README"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile")," and ",Object(o.b)("inlineCode",{parentName:"p"},"gitlog.txt"),". (While we do absolutely\nexpect you to write code that tests your implementation, you are not\nexpected to submit your tests to us for grading.)"),Object(o.b)("p",null,"Copy ",Object(o.b)("inlineCode",{parentName:"p"},"project.zip")," to your local machine and submit it as ",Object(o.b)("strong",null,"Final\nProject - Code (Team)")," on Gradescope. This will be a group\nsubmission, where you must indicate team member's name on Gradescope as\npart of the submission."),Object(o.b)("p",null,"As always, when you submit, Gradescope conducts some automatic tests.\nThese do basic checks, e.g. to check that you submitted the right files.\nIf you see error messages (in red), address them and resubmit. You may\nre-submit any number of times prior to the deadline; only your latest\nsubmission will be graded."),Object(o.b)("p",null,"Two notes regarding automatic checks for programming assignments:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Passing an automatic check is not itself worth points.  (There might\nbe a nominal, low point value like 0.01 associated with a check, but\nthat won\u2019t count in the end.) The checks exist to help you and the\ngraders find obvious errors."),Object(o.b)("li",{parentName:"ul"},"The automatic checks cover some of the requirements set out in the\nassignment, but not all. It is up to you to test your own work and ensure\nyour programs satisfy ",Object(o.b)("em",{parentName:"li"},"all stated requirements"),".  Passing all automatic\nchecks does not mean you earned all the points.")),Object(o.b)("h2",{id:"contributions-submission-individual"},"Contributions Submission (Individual)"),Object(o.b)("p",null,"Separately, after your team's code submission is complete, each\nteam member must individually complete the ",Object(o.b)("strong",null,"Final Project -\nContributions (Individual)")," assignment on Gradescope. Similar\nto the midterm project, this individual submission will give each\nstudent an opportunity to comment on the contributions that they and\ntheir partners made to the final project."),Object(o.b)("p",null,"Note that the deadline for this individual submission is 48 hours after\nthe code submission deadline. ",Object(o.b)("strong",{parentName:"p"},"Each team member must submit their own\nversion of this assignment in order to get credit for\ntheir work on the final project.")))}p.isMDXComponent=!0}}]);