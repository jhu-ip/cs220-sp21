(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{133:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var i=n(2),a=n(6),o=(n(0),n(138)),r={id:"ex9-2",title:"Exercise 9-2"},l={unversionedId:"exercises/ex9-2",id:"exercises/ex9-2",isDocsHomePage:!1,title:"Exercise 9-2",description:"As you work, feel free to discuss with other students and ask questions of the Professor/CAs. Aim to complete as much as possible during our meeting time. Work at home to complete what you do not get through during class. You will not hand in your work.",source:"@site/docs/exercises/ex9-2.md",slug:"/exercises/ex9-2",permalink:"/cs220-sp21/docs/exercises/ex9-2",version:"current"},c=[{value:"Motivation",id:"motivation",children:[]},{value:"Implementation",id:"implementation",children:[]},{value:"Part 1",id:"part-1",children:[]},{value:"Part 2",id:"part-2",children:[]},{value:"Part 3",id:"part-3",children:[]},{value:"Part 4",id:"part-4",children:[]},{value:"Part 5",id:"part-5",children:[]},{value:"Part 6",id:"part-6",children:[]}],s={rightToc:c};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"As you work, feel free to discuss with other students and ask questions of the Professor/CAs. Aim to complete as much as possible during our meeting time. Work at home to complete what you do not get through during class. You will not hand in your work."))),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Get started by running ",Object(o.b)("inlineCode",{parentName:"p"},"git pull")," to update your clone of the public repository, and then copying the ",Object(o.b)("inlineCode",{parentName:"p"},"exercises/ex9-2")," directory into your personal git repository."))),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Learning Objectives")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Reinforces basic C++ concepts"),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"C++ basics: references"),Object(o.b)("li",{parentName:"ul"},"STL: vectors and iterators"),Object(o.b)("li",{parentName:"ul"},"Recursion")))),Object(o.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Goal")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Complete the implementation of code which transforms a probability density function into a cumulative distribution function. Then compare naive and fast implementations of finding the index of a given percentile."))),Object(o.b)("h3",{id:"motivation"},"Motivation"),Object(o.b)("p",null,"Suppose that you have a loaded ",Object(o.b)("inlineCode",{parentName:"p"},"N"),"-sided die. You can represent the probability of rolling a particular number using an array of ",Object(o.b)("inlineCode",{parentName:"p"},"N")," floating point elements, so that the indices range from 0 to ",Object(o.b)("inlineCode",{parentName:"p"},"N"),"-1. (We're computer scientists, so we start counting at zero, and even our dice start at zero). As such, the values in the array will be in the range ","[","0,1","]"," (you can't have negative probabilities and the probability of rolling any value cannot be greater than 100%) and the sum of the values in the array should be 1 (with probability 100%, you will get some value). This array of values is called a probability distribution function (PDF). Using this representation, the probability of rolling an ",Object(o.b)("inlineCode",{parentName:"p"},"i")," is ",Object(o.b)("inlineCode",{parentName:"p"},"PDF[i]"),"."),Object(o.b)("p",null,'Your intent will be to gamble with this die -- you will be placing bets that, on a given roll, the value on the die will be less than or equal to some number. To do this effectively you want to change the way the array stores the probability information so that instead of answering the question "what is the likelihood that I roll an ',Object(o.b)("inlineCode",{parentName:"p"},"i"),'?" you can answer the question "what is the likelihood that I roll something with value less than or equal to ',Object(o.b)("inlineCode",{parentName:"p"},"i"),'?". To do this you want change your PDF to a cumulative distribution function (CDF) -- an array whose entry at index ',Object(o.b)("inlineCode",{parentName:"p"},"i")," is the sum of the probabilities of rolling a value less than or equal to ",Object(o.b)("inlineCode",{parentName:"p"},"i"),"."),Object(o.b)("p",null,"Finally, as part of the gambling you will want to change the betting odds on the fly. For example, while you may have started with 1-to-1 odds, you may decide that you want to put a 3-to-1 bet that you will get a value less than ",Object(o.b)("inlineCode",{parentName:"p"},"i"),". To do this effectively (i.e. to win money) you need to be able to find the value ",Object(o.b)("inlineCode",{parentName:"p"},"i")," with the probability of rolling something less than or equal to ",Object(o.b)("inlineCode",{parentName:"p"},"i")," is at least one third. Using your precomputed CDF, you can do this by finding the last index ",Object(o.b)("inlineCode",{parentName:"p"},"i")," for which ",Object(o.b)("inlineCode",{parentName:"p"},"CDF[i] <= 1./3"),"."),Object(o.b)("h3",{id:"implementation"},"Implementation"),Object(o.b)("p",null,"In your code:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The values of the PDF/CDF will be stored in ",Object(o.b)("inlineCode",{parentName:"li"},"std::vector< double > distribution"),"."),Object(o.b)("li",{parentName:"ul"},"The function converting the PDF to a CDF is called ",Object(o.b)("inlineCode",{parentName:"li"},"make_cumulative"),"."),Object(o.b)("li",{parentName:"ul"},"The functions for finding the last index (iterator) for which the CDF is below a prescribed value are ",Object(o.b)("inlineCode",{parentName:"li"},"naive_find_last_iterator")," and ",Object(o.b)("inlineCode",{parentName:"li"},"fast_find_last_iterator"),". The former iterates sequentially through the CDF, starting with the first entry and continuing until it finds the desired index. The latter uses binary search (recursion) to find the index more efficiently.")),Object(o.b)("h3",{id:"part-1"},"Part 1"),Object(o.b)("p",null,"Pull the starter code for this exercise from the public repo by taking the following steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Log into ugrad, then navigate into ",Object(o.b)("inlineCode",{parentName:"p"},"cs220-sp21-public"),", type ",Object(o.b)("inlineCode",{parentName:"p"},"git status")," and confirm you have not modified any files or accidentally committed to the public repo. Ask for help if you have added or committed files there and need to undo.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Type ",Object(o.b)("inlineCode",{parentName:"p"},"git pull")," to synchronize your local repo and working copy with the remote repo.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Confirm that you can see the template files for today\u2019s exercise by typing ",Object(o.b)("inlineCode",{parentName:"p"},"ls exercises/ex9-2")," -- you should see a file named ",Object(o.b)("inlineCode",{parentName:"p"},"distribution.cpp"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Copy ",Object(o.b)("inlineCode",{parentName:"p"},"distribution.cpp")," from the public class repository (in the ",Object(o.b)("inlineCode",{parentName:"p"},"/exercises/ex9-2/")," directory) to your personal repo in a new directory named ",Object(o.b)("inlineCode",{parentName:"p"},"ex9-2")," under ",Object(o.b)("inlineCode",{parentName:"p"},"~/cs220/exercises/"),"."))),Object(o.b)("h3",{id:"part-2"},"Part 2"),Object(o.b)("p",null,"The supplied file ",Object(o.b)("inlineCode",{parentName:"p"},"distribution.cpp")," will not compile out of the box as the function ",Object(o.b)("inlineCode",{parentName:"p"},"make_cumulative")," is not defined. You will need to declare and define this function. This will take a vector of values in the range ","[0,1]",", summing to one, and change them so that after the function call the value in the ",Object(o.b)("inlineCode",{parentName:"p"},"i"),"-th entry is sum the of the values in entries {0,...,",Object(o.b)("inlineCode",{parentName:"p"},"i"),"} of the input vector. Note that:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Since the original entries are all in the range ","[0,1]",", after the call to ",Object(o.b)("inlineCode",{parentName:"li"},"make_cumulative")," the entries should be strictly non-decreasing."),Object(o.b)("li",{parentName:"ol"},"Since the sum of the original entries was 1, after the call to ",Object(o.b)("inlineCode",{parentName:"li"},"make_cumulative")," the last entry should have value 1.")),Object(o.b)("h3",{id:"part-3"},"Part 3"),Object(o.b)("p",null,"You should now be able to compile ",Object(o.b)("inlineCode",{parentName:"p"},"distribution.cpp")," by typing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"g++ -std=c++11 -Wall -Wextra -pedantic distribution.cpp -o distribtion.\n")),Object(o.b)("p",null,"Next, confirm that you have correctly implemented the ",Object(o.b)("inlineCode",{parentName:"p"},"make_cumulative")," function by running the executable ",Object(o.b)("inlineCode",{parentName:"p"},"distribution")," using a histogram with 30 bins and 10000 random samples by typing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"echo 30 10000 0 | ./distribution\n")),Object(o.b)("p",null,"(If your CDF does not look reasonable, you will trigger an assertion.)"),Object(o.b)("h3",{id:"part-4"},"Part 4"),Object(o.b)("p",null,"Now, implement the body of the ",Object(o.b)("inlineCode",{parentName:"p"},"naive_find_last_iterator")," function. This function starts at the ",Object(o.b)("inlineCode",{parentName:"p"},"begin")," iterator and advances sequentially through the container until it finds the last iterator with the property that the value of the associated entry is less than or equal to ",Object(o.b)("inlineCode",{parentName:"p"},"v"),".\nConfirm that you have implemented the function correctly by running the executable ",Object(o.b)("inlineCode",{parentName:"p"},"distribution")," using a histogram with 30 bins, 100000 random samples, and 10 calls to the ",Object(o.b)("inlineCode",{parentName:"p"},"naive_find_last_iterator")," function by typing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"echo 30 10000 10 | ./distribution\n")),Object(o.b)("p",null,'(If your implementation works, you should see "Confirmed that the naive find seems reasonable", though you will still trigger an assertion for your as-of-yet-unimplemented ',Object(o.b)("inlineCode",{parentName:"p"},"find_fast_last_iterator")," function.)"),Object(o.b)("h3",{id:"part-5"},"Part 5"),Object(o.b)("p",null,"Now, implement the body of the ",Object(o.b)("inlineCode",{parentName:"p"},"fast_find_last_iterator")," function. Like the ",Object(o.b)("inlineCode",{parentName:"p"},"naive_find_last_iterator")," function, this will return the last iterator with the property that the value of the associated entry is less than or equal to ",Object(o.b)("inlineCode",{parentName:"p"},"v"),". However, instead of advancing sequentially, you should find the iterator using recursion -- splitting the range in two and only checking the half-range that could contain the iterator.\nConfirm that you have implemented the function correctly by running the executable ",Object(o.b)("inlineCode",{parentName:"p"},"distribution")," using a histogram with 30 bins, 100000 random samples, and 10 calls to the ",Object(o.b)("inlineCode",{parentName:"p"},"naive_find_last_iterator")," function by typing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"echo 30 10000 10 | ./distribution\n")),Object(o.b)("p",null,'(If your implementation works, you should see "Confirmed that the naive find seems reasonable" and "Confirmed that the fast find seems reasonable".)'),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Hint:")," Keep in mind that the iterators for the ",Object(o.b)("inlineCode",{parentName:"p"},"std::vector< double >")," class are Random Access Iterators. This means that not only can you advance them by calling ",Object(o.b)("inlineCode",{parentName:"p"},"iter++"),", but you get the iterator ",Object(o.b)("inlineCode",{parentName:"p"},"n")," elements ahead by usning ",Object(o.b)("inlineCode",{parentName:"p"},"iter+n")," and you can get the number of elements between two iterators by calling ",Object(o.b)("inlineCode",{parentName:"p"},"iter2-iter"),"."),Object(o.b)("h3",{id:"part-6"},"Part 6"),Object(o.b)("p",null,"Stress-test your implementations by running on a histogram with 1000000 bins, 10000 random samples, and 100 calls to the ",Object(o.b)("inlineCode",{parentName:"p"},"naive_find_last_iterator")," and ",Object(o.b)("inlineCode",{parentName:"p"},"fast_find_last_iterator")," functions by typing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"echo 1000000 10000 100 | ./distribution\n")),Object(o.b)("p",null,"What do the running times tell you?"))}b.isMDXComponent=!0},138:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var i=n(0),a=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(n),u=i,m=p["".concat(r,".").concat(u)]||p[u]||d[u]||o;return n?a.a.createElement(m,l(l({ref:t},s),{},{components:n})):a.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);