(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{115:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return b}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=n,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return a?i.a.createElement(b,o(o({ref:t},c),{},{components:a})):i.a.createElement(b,o({ref:t},c))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<r;c++)s[c]=a[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},159:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/sound-sinewave-852e6c6a751de54a079f42afd2f270a1.png"},160:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/sound-sinewave-cycles-2c4fc7ee671d8fba7ee1cd002fe2528e.png"},161:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/sound-sinewave-samples-836e8f3c7a1ca1c2e71bd0fd27d6a69c.png"},162:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/sound-noclip-8a2e991ca0e77b1449e3d2bf8beba436.png"},163:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/sound-clip-f35397ef050673b7eb36adc61136cec1.png"},81:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(2),i=a(6),r=(a(0),a(115)),s={id:"midterm",title:"Midterm Project"},o={unversionedId:"assignments/midterm",id:"assignments/midterm",isDocsHomePage:!1,title:"Midterm Project",description:"* You are expected to work as a team of two.",source:"@site/docs/assignments/midterm.md",slug:"/assignments/midterm",permalink:"/cs220-sp21/docs/assignments/midterm",version:"current"},l=[{value:"Getting started",id:"getting-started",children:[]},{value:"What sound is",id:"what-sound-is",children:[]},{value:"Complex audio waveforms",id:"complex-audio-waveforms",children:[]},{value:"Digital sound",id:"digital-sound",children:[]},{value:"Mixing digital audio signals, clipping",id:"mixing-digital-audio-signals-clipping",children:[]},{value:"Stereo sound, WAVE files",id:"stereo-sound-wave-files",children:[]}],c={rightToc:l};function p(e){var t=e.components,s=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,s,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"You are expected to work as a team of two."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Due: Tuesday ",Object(r.b)("strong",{parentName:"strong"},"March 25th")," at 11pm EDT (Baltimore time).")),Object(r.b)("li",{parentName:"ul"},"No late days are allowed!"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"This assignment is worth 60 points."))))),Object(r.b)("h1",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"In this project you will implement programs to generate and transform\ndigital audio."),Object(r.b)("p",null,"This is a pair project, so you will work with one classmate.  You should\npractice pair programming where you work directly with you partner, in\nperson, to design and implement the program.  We will spend some time in\nclass working on the project, so your partner needs to be in your section."),Object(r.b)("p",null,"You will use git for version control.  ",Object(r.b)("em",{parentName:"p"},"TODO: how repo will be created,\naccessed.")),Object(r.b)("p",null,"The project is larger and more complex than the previous homework\nassignments.  You\u2019ll want to start early and make steady, incremental\nprogress towards completing the project requirements."),Object(r.b)("h2",{id:"getting-started"},"Getting started"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"TODO: details about getting started, setting up repo, etc.")),Object(r.b)("h1",{id:"sound"},"Sound"),Object(r.b)("p",null,"This section has some background about sound and how it can be represented digitally."),Object(r.b)("h2",{id:"what-sound-is"},"What sound is"),Object(r.b)("p",null,"Sound is changes in air pressure over time.  When physical objects\nvibrate, they cause oscillations in air pressure that propagate outwards\nin a wave.  A sensor such as a microphone or your ear can detect these\nchanges in pressure over time."),Object(r.b)("p",null,"The most basic type of oscillation is a sine wave, where the changes in\npressure over time are modeled by the equation"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"p")," = ",Object(r.b)("em",{parentName:"p"},"a")," \xd7 sin(",Object(r.b)("em",{parentName:"p"},"tf")," \xd7 2\u03c0)"),Object(r.b)("p",null,"where ",Object(r.b)("em",{parentName:"p"},"p")," is pressure, ",Object(r.b)("em",{parentName:"p"},"t")," is time, ",Object(r.b)("em",{parentName:"p"},"f")," is frequency, and ",Object(r.b)("em",{parentName:"p"},"a")," is\namplitude.  Because the sine function yields both positive and negative\nvalues, the resulting pressure values (",Object(r.b)("em",{parentName:"p"},"p"),") can be both positive and\nnegative.  The pressure values represent the instantaneous air pressure\nrelative to the overall average air pressure."),Object(r.b)("p",null,"Plotted with time on the x-axis and pressure on the y-axis, a sine wave\nlooks like this:"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Sine wave",src:a(159).default})),Object(r.b)("p",null,"A ",Object(r.b)("em",{parentName:"p"},"cycle")," consists of one full oscillation with both positive and negative peaks:"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Sine wave cycle",src:a(160).default})),Object(r.b)("p",null,"When the frequency increases, the cycles become shorter, so there are more\ncycles per unit of time.  The standard measurement of frequency, the Hertz\n(abbreviated Hz), is defined as one cycle per second.  Sound waves have\nfrequencies that range from the low tens of Hz to tens of thousands of Hz.\nWe perceive sounds with higher frequencies as being higher-pitched."),Object(r.b)("p",null,"Here is what one second of a 440 Hz sine wave sounds like:"),Object(r.b)("audio",{controls:!0},Object(r.b)("source",{src:"../../snd/a440.wav",type:"audio/wav"})),Object(r.b)("div",null),Object(r.b)("h2",{id:"complex-audio-waveforms"},"Complex audio waveforms"),Object(r.b)("p",null,"Obviously real sounds are much more complex than just plain sine waves.\nIn general, any sound can be represented by the ",Object(r.b)("em",{parentName:"p"},"sum")," of sine waves of\nvarying frequencies and amplitudes.  Here is one second of a 440 Hz sine\nwave mixed with a 587.33 Hz sine wave:"),Object(r.b)("audio",{controls:!0},Object(r.b)("source",{src:"../../snd/a440_third.wav",type:"audio/wav"})),Object(r.b)("div",null),Object(r.b)("p",null,"At a physical level, the air pressure changes as the ",Object(r.b)("em",{parentName:"p"},"sum")," of the pressure\nchanges induced by all of the sine waves being generated.  Humans can\neffectively hear multiple tones at the same time, deconstructing the\nadded sine waves into the constituent frequencies.  The example you just\nheard (440 Hz and 587.33 Hz) is two tones separated by a ",Object(r.b)("em",{parentName:"p"},"major third"),",\nan important frequency interval in western music."),Object(r.b)("h2",{id:"digital-sound"},"Digital sound"),Object(r.b)("p",null,"There are a variety of ways to represent sound using a computer.\nThe most straightforward way is using linear ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Pulse-code_modulation"}),"pulse code\nmodulation"),",\nwhere sound is represented as a sequence of ",Object(r.b)("em",{parentName:"p"},"samples"),", each sample\nrepresenting air pressure at a moment in time.  The ",Object(r.b)("em",{parentName:"p"},"sampling frequency"),"\ndetermines how many (evenly spaced) samples there are per unit of time.\nCD quality audio, a common PCM format, uses signed 16 bit samples\n(ranging from -32,768 to 32,767) and a sampling frequency of 44.1 KHz\n(44,100 samples per second.)  In C, the ",Object(r.b)("inlineCode",{parentName:"p"},"int16_t")," data type (defined in\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"<stdint.h>")," header file) matches the range of sample data values\nfor CD quality audio.  So, an array of ",Object(r.b)("inlineCode",{parentName:"p"},"int16_t")," elements can represent\nCD quality audio: each 44,100 elements represents one second of audio."),Object(r.b)("p",null,"To make this idea explicit, let's say that the sound we want to represent\nis a sine wave with an amplitude of 0.1 and a frequency of 440 Hz.\nWe'll consider amplitude as being relative to the loudest possible sound,\ndefined as 1.0, so a signal with an amplitude of 0.1 has positive and\nnegative peaks that are 10% as large as the loudest possible signal.\nWith a sampling frequency of 44.1 KHz, each cycle of our 440 Hz audio\nsignal will be represented by about 100 samples (really 100.22727...).  The values of the\nindividual samples will vary between (approximately) -3,276 and 3,276.\nLet's say the audio data is in an array of ",Object(r.b)("inlineCode",{parentName:"p"},"int16_t")," elements called\n",Object(r.b)("inlineCode",{parentName:"p"},"sound"),".  Here is a diagram showing several points on the first cycle\nof the signal, their values, and which array elements they would be\nstored in:"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Sine wave with samples",src:a(161).default})),Object(r.b)("p",null,"As long as the number of bits per sample is reasonably large, and the\nsampling frequency is reasonably high, PCM can represent audio with a\nhigh degree of fidelity to the original sound."),Object(r.b)("h2",{id:"mixing-digital-audio-signals-clipping"},"Mixing digital audio signals, clipping"),Object(r.b)("p",null,"Because sound waves interact additively, you can combine two digital\naudio signals by simply ",Object(r.b)("em",{parentName:"p"},"adding")," their respective sample values."),Object(r.b)("p",null,"A potential problem that can arise when adding sample values is that\nthe sum might exceed the maximum positive or negative sample values: for\nexample, 32,767 and -32,768 for 16 bit signed samples.  If this happens,\nwe can't really fully represent the resulting combined signal.  ",Object(r.b)("em",{parentName:"p"},"Clipping"),"\nis a phenomenon that results from such overflows, in particular, when we\nuse ",Object(r.b)("em",{parentName:"p"},"saturating")," addition such that sums greater than the maximum possible\nvalue or less than the minimum possible value (e.g., 32,767/-32,768)\nare ",Object(r.b)("em",{parentName:"p"},"clamped")," at the maximum or minimum."),Object(r.b)("p",null,"For example, here is an audio signal where the amplitude exceeds the\nrange that can be represented, with the minimum and maximum sample values\nshown as light blue dashed lines:"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Audio signal before clipping",src:a(162).default})),Object(r.b)("p",null,"Clipping will change the waveform to the following:"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Audio signal after clipping",src:a(163).default})),Object(r.b)("p",null,"Humans perceive clipping as distortion of the original signals.\nClipping can be avoided by making sure that audio signals being mixed\nhave relatively small amplitudes, so that the sum of their sample values\nnever exceeds the range of representable sample values."),Object(r.b)("h2",{id:"stereo-sound-wave-files"},"Stereo sound, WAVE files"),Object(r.b)("p",null,"Most sound recordings are ",Object(r.b)("em",{parentName:"p"},"stereo")," meaning that there are separate\nleft and right audio channels.  A common way to represent stereo audio\nis to consider the even-numbered samples (0 being the first sample) as\nbelonging to the left channel, and the odd-numbered samples as belonging\nto the right channel."),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://soundfile.sapp.org/doc/WaveFormat/"}),"WAVE file format")," is a\ncommon file format for digital audio.  Although a variety of encodings\nare possible in WAVE files, they are most commonly used for linear PCM\naudio data.  Wave files represent stereo PCM data using the scheme just\ndescribed (samples 0, 2, 4, etc. belong to the left channel, samples 1,\n3, 5, etc. belong to the right channel.)"),Object(r.b)("p",null,"In this project you will write programs to read and write audio data in\nthe WAVE format.  The good news is that WAVE files are pretty simple:\nthey consist of a ",Object(r.b)("em",{parentName:"p"},"header")," followed by raw sample data.  Digital audio\nprograms can represent sound waveforms internally using arrays with\nsample data.  To read audio data from a WAVE file, a program needs\nto read the header, and then read the raw sample data into an array.\nTo write audio data to a WAVE file, a program needs to write the header,\nand then write the raw sample data from an array."),Object(r.b)("h1",{id:"functional-requirements"},"Functional requirements"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"TODO: document what exactly we are expecting students to do")))}p.isMDXComponent=!0}}]);