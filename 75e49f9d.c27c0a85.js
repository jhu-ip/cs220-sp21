(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{138:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return u}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=i.a.createContext({}),b=function(e){var n=i.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=b(e.components);return i.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=b(t),m=a,u=s["".concat(o,".").concat(m)]||s[m]||d[m]||r;return t?i.a.createElement(u,c(c({ref:n},p),{},{components:t})):i.a.createElement(u,c({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<r;p++)o[p]=t[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},84:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var a=t(2),i=t(6),r=(t(0),t(138)),o={id:"ex5-3",title:"Exercise 5-3"},c={unversionedId:"exercises/ex5-3",id:"exercises/ex5-3",isDocsHomePage:!1,title:"Exercise 5-3",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability in the time given. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, but you need not hand it in. You are encouraged to work at home to complete what you do not get through today, and ask questions over Piazza or in office hours.",source:"@site/docs/exercises/ex5-3.md",slug:"/exercises/ex5-3",permalink:"/cs220-sp21/docs/exercises/ex5-3",version:"current"},l=[{value:"Part 1",id:"part-1",children:[]},{value:"Part 2",id:"part-2",children:[]},{value:"Part 3",id:"part-3",children:[]},{value:"Part 4",id:"part-4",children:[]}],p={rightToc:l};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability in the time given. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, but you need not hand it in. You are encouraged to work at home to complete what you do not get through today, and ask questions over Piazza or in office hours."))),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Learning Objectives")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"Reinforces concepts learned in today meeting:"),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"pseudo-random integers"),Object(r.b)("li",{parentName:"ul"},"integer representation (two\u2019s complement, endianness)")))),Object(r.b)("h3",{id:"part-1"},"Part 1"),Object(r.b)("p",null,"Pull the starter code for this exercise from the public repo by taking the following steps:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Log into ugrad, then navigate into ",Object(r.b)("inlineCode",{parentName:"p"},"cs220-sp21-public"),", type ",Object(r.b)("inlineCode",{parentName:"p"},"git status")," and confirm you have not modified any files or accidentally committed to the public repo. Ask for help if you have added or committed files there and need to undo.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Type ",Object(r.b)("inlineCode",{parentName:"p"},"git pull")," to synchronize your local repo and working copy with the remote repo.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Confirm that you can see the template files for today\u2019s exercise by typing ",Object(r.b)("inlineCode",{parentName:"p"},"ls exercises/ex5-3")," \u2014 you should see the files ",Object(r.b)("inlineCode",{parentName:"p"},"random.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"intrep.c")," and ",Object(r.b)("inlineCode",{parentName:"p"},"endian.c"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Copy all of the C source files (",Object(r.b)("inlineCode",{parentName:"p"},"*.c"),") from the public class repository (in the ",Object(r.b)("inlineCode",{parentName:"p"},"/exercises/ex5-3/")," directory) to your personal repo in a new directory named ",Object(r.b)("inlineCode",{parentName:"p"},"ex5-3")," under ",Object(r.b)("inlineCode",{parentName:"p"},"~/cs220/exercises/"),". (In the subdirectory of your private repository where you will work on this exercise, run the command ",Object(r.b)("inlineCode",{parentName:"p"},"cp ~/cs220-sp21-public/exercises/ex5-3/*.c ."),")."))),Object(r.b)("h3",{id:"part-2"},"Part 2"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"1.")," One important property of the ",Object(r.b)("inlineCode",{parentName:"p"},"rand")," function is that it generates\na ",Object(r.b)("em",{parentName:"p"},"uniform")," distribution of pseudo-random integer values."),Object(r.b)("p",null,"In the source file ",Object(r.b)("inlineCode",{parentName:"p"},"random.c"),", add a definition for the\n",Object(r.b)("inlineCode",{parentName:"p"},"uniform_rand")," function as indicated by the ",Object(r.b)("inlineCode",{parentName:"p"},"TODO (1)")," comment.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"uniform_rand")," function should return pseudo-random integers in\nthe range 0 to ",Object(r.b)("inlineCode",{parentName:"p"},"NUM_BUCKETS"),"-1, inclusive, uniformly distributed."),Object(r.b)("p",null,"Next, as indicated by the ",Object(r.b)("inlineCode",{parentName:"p"},"TODO (2)")," comment in the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function,\nadd code to generate 500 uniformly-generated pseudo-random integers\nand increment the elements of the ",Object(r.b)("inlineCode",{parentName:"p"},"hist")," array accordingly.  (Each\ngenerated pseudo-random integer should be used to increment the ",Object(r.b)("inlineCode",{parentName:"p"},"hist"),"\narray element with the same index as the generated pseudo-random integer.)"),Object(r.b)("p",null,"Next, add a definition for the ",Object(r.b)("inlineCode",{parentName:"p"},"print_hist")," function, as indicated by\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"TODO (3)")," comment.  It should print a bar graph of the contents\nof its array parameter, as described by the comment."),Object(r.b)("p",null,"Then, add a call to the ",Object(r.b)("inlineCode",{parentName:"p"},"print_hist")," function to print a bar graph\nof the data in the ",Object(r.b)("inlineCode",{parentName:"p"},"hist")," array, as indicated by the ",Object(r.b)("inlineCode",{parentName:"p"},"TODO (4)")," comment."),Object(r.b)("p",null,"Compile the program:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"gcc -g -o random -Wall -Wextra -pedantic -std=c99 random.c\n")),Object(r.b)("p",null,"Run the program using the command ",Object(r.b)("inlineCode",{parentName:"p"},"./random"),".  The output should look something\nlike the following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"Uniform distribution:\n 0: ****************\n 1: ****************\n 2: ******************\n 3: *****************\n 4: ************\n 5: ***************\n 6: *****************\n 7: ************\n 8: ***********************\n 9: **********************\n10: ****************\n11: *************\n12: ******************\n13: *******************\n14: *****************************\n15: *************\n16: ********************\n17: *****************\n18: ********************\n19: **************\n20: *******************\n21: **************\n22: ***************\n23: ***********\n24: ***********\n25: **************\n26: *****************\n27: ***************\n28: ***********\n29: **************************\n")),Object(r.b)("p",null,"The output of ",Object(r.b)("inlineCode",{parentName:"p"},"print_hist")," should show that each element of the ",Object(r.b)("inlineCode",{parentName:"p"},"hist")," array\nvalues that are similar to each other.  This is what we expect from a normal\ndistribution."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"2.")," A ",Object(r.b)("em",{parentName:"p"},"normal")," distribution of pseudo-random integers can be generated by\nsumming multiple uniformly-distributed pseudo-random integer values."),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"random.c")," add a definition for the ",Object(r.b)("inlineCode",{parentName:"p"},"normal_rand")," function, as indicated\nby the ",Object(r.b)("inlineCode",{parentName:"p"},"TODO (5)")," comment.  This function should return a normal distribution\nof integers (refer to the comment for details).\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"normal_rand")," function should return pseudo-random integers in\nthe range 0 to ",Object(r.b)("inlineCode",{parentName:"p"},"NUM_BUCKETS"),"-1, inclusive, normally distributed."),Object(r.b)("p",null,"Then, as indicated by the ",Object(r.b)("inlineCode",{parentName:"p"},"TODO (6)")," comment in the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function,\nadd code to generate 500 normally-generated pseudo-random integers and\nincrement the elements of the ",Object(r.b)("inlineCode",{parentName:"p"},"hist")," array accordingly.  (Each generated\npseudo-random integer should be used to increment the ",Object(r.b)("inlineCode",{parentName:"p"},"hist")," array\nelement with the same index as the generated pseudo-random integer.)"),Object(r.b)("p",null,"Next, add a call to the ",Object(r.b)("inlineCode",{parentName:"p"},"print_hist")," function to print a bar graph\nof the data in the ",Object(r.b)("inlineCode",{parentName:"p"},"hist")," array as indicated by the ",Object(r.b)("inlineCode",{parentName:"p"},"TODO (7)")," comment."),Object(r.b)("p",null,"Compile and run the program.  The output should look something like\nthe following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"Normal distribution:\n 0: \n 1: *\n 2: \n 3: *\n 4: *\n 5: \n 6: *\n 7: *********\n 8: ********************\n 9: **********************\n10: ********************\n11: ********************************\n12: *************************************\n13: *********************************\n14: *********************************************\n15: ***********************************************\n16: ***********************************************\n17: ************************************************\n18: ****************************************\n19: ******************************\n20: ***************\n21: ****************\n22: *************\n23: ***********\n24: *****\n25: *\n26: ***\n27: **\n28: \n29: \n")),Object(r.b)("p",null,"Your program's output doesn't need to look exactly like the output shown above,\nbut it should show a \"bell curve\" centered at approximately the middle of the\narray of counts."),Object(r.b)("p",null,"You may need to experiment a bit to find a good way to generate a more-or-less\nnormal distribution."),Object(r.b)("h2",{id:"part-3"},"Part 3"),Object(r.b)("p",null,"In the source file ",Object(r.b)("inlineCode",{parentName:"p"},"intrep.c"),", implement the ",Object(r.b)("inlineCode",{parentName:"p"},"int_magnitude")," function.\nIt receives an ",Object(r.b)("inlineCode",{parentName:"p"},"unsigned int")," value as an argument, which it should interpret as being\na 32-bit two's complement signed integer value.  It should return an\n",Object(r.b)("inlineCode",{parentName:"p"},"unsigned int")," value representing the ",Object(r.b)("em",{parentName:"p"},"magnitude")," of the argument value.\nA trivial implementation of the ",Object(r.b)("inlineCode",{parentName:"p"},"magnitude")," function would look like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-c"},"unsigned int magnitude(unsigned int val) {\n  int signed_val = (int) val;\n  if (signed_val < 0) {\n    val = -signed_val;\n  }\n  return val;\n}\n")),Object(r.b)("p",null,"Using your knowledge of two's complement representation and bitwise operators,\nimplement the ",Object(r.b)("inlineCode",{parentName:"p"},"magnitude")," function without using any signed values.\nIn other words, don't use any values belonging to the ",Object(r.b)("inlineCode",{parentName:"p"},"int ")," data type,\nor any other signed data type."),Object(r.b)("p",null,"Here is a suggested approach:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"If the highest bit of ",Object(r.b)("inlineCode",{parentName:"li"},"val")," is not set to 1, then just return the value as-is"),Object(r.b)("li",{parentName:"ul"},"If the highest bit of ",Object(r.b)("inlineCode",{parentName:"li"},"val")," is set to 1, then it's magnitude can be found by\nsubtracting the value of the bits other than the highest bit from the\n",Object(r.b)("inlineCode",{parentName:"li"},"unsigned int")," value numerically equal to ",Object(r.b)("inlineCode",{parentName:"li"},"INT_MAX")," plus 1")),Object(r.b)("p",null,"Compile the program using the command"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"gcc -g -o intrep -Wall -Wextra -pedantic -std=c99 intrep.c\n")),Object(r.b)("p",null,"Run the program using the command  ",Object(r.b)("inlineCode",{parentName:"p"},"./intrep"),".\nYou will know if your implementation is correct if you can run the program,\nand all of the ",Object(r.b)("inlineCode",{parentName:"p"},"assert")," statements in the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function succeed."),Object(r.b)("h2",{id:"part-4"},"Part 4"),Object(r.b)("p",null,"Compile and run the ",Object(r.b)("inlineCode",{parentName:"p"},"endian.c")," program using the following commands:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"gcc -g -o endian -Wall -Wextra -pedantic -std=c99 endian.c\n./endian\n")),Object(r.b)("p",null,"In its initial form, this program will print the size in bytes of several\ninteger data types.  You can interpret the size of each data type as being\nthe number of bytes required to store one value belonging to the data type.\nFor example, if ",Object(r.b)("inlineCode",{parentName:"p"},"sizeof(int)")," is 4, that means that 4 bytes are needed to\nstore one instace of the ",Object(r.b)("inlineCode",{parentName:"p"},"int")," data type.  This makes a lot of sense if\none byte stores 8 bits, and ",Object(r.b)("inlineCode",{parentName:"p"},"int")," is a 32-bit type."),Object(r.b)("p",null,'Now that we know that instances of the various integer data types require\nmultiple bytes of memory to represent, an important question to ask is:\n"how are the bytes of an integer value stored in memory"?  Two typical\napproaches are called ',Object(r.b)("em",{parentName:"p"},"little endian")," and ",Object(r.b)("em",{parentName:"p"},"big endian"),".  On a ",Object(r.b)("em",{parentName:"p"},"big endian"),"\ncomputer, the most significant byte of a multi-byte data value is stored\nin memory before the less-significant bytes.  In contrast, on a ",Object(r.b)("em",{parentName:"p"},"little endian"),"\ncomputer, the least significant byte of a multi-byte data value is stored\nin memory before the more-significant bytes."),Object(r.b)("p",null,'Uncomment the code labeled as "uncomment this part".  The variable called\n',Object(r.b)("inlineCode",{parentName:"p"},"val")," contains the value 950238851, which in hexadecimal is ",Object(r.b)("inlineCode",{parentName:"p"},"38A37E83"),".\nThat means that the bytes making up this value, from most significant to\nleast signnificant, are"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"38 A3 7E 83 \n")),Object(r.b)("p",null,"Recompile the program, then run it in ",Object(r.b)("inlineCode",{parentName:"p"},"gdb")," using the command"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"gdb endian\n")),Object(r.b)("p",null,"Set a breakpoint at the beginning of the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function using the command\n",Object(r.b)("inlineCode",{parentName:"p"},"break main"),".  Run the program in ",Object(r.b)("inlineCode",{parentName:"p"},"gdb")," using the ",Object(r.b)("inlineCode",{parentName:"p"},"run")," command.  Use the ",Object(r.b)("inlineCode",{parentName:"p"},"next"),"\ncommand until ",Object(r.b)("inlineCode",{parentName:"p"},"gdb")," is at the final ",Object(r.b)("inlineCode",{parentName:"p"},"printf")," command of the program.  The pointer\n",Object(r.b)("inlineCode",{parentName:"p"},"p")," points to the memory location which stores the value of the ",Object(r.b)("inlineCode",{parentName:"p"},"val")," variable.\nRun the following commands in ",Object(r.b)("inlineCode",{parentName:"p"},"gdb"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"print/x ((unsigned char *)p)[0]\nprint/x ((unsigned char *)p)[1]\nprint/x ((unsigned char *)p)[2]\nprint/x ((unsigned char *)p)[3]\n")),Object(r.b)("p",null,"These ",Object(r.b)("inlineCode",{parentName:"p"},"gdb")," commands"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"type cast the pointer to ",Object(r.b)("inlineCode",{parentName:"li"},"p"),' to the type "pointer to ',Object(r.b)("inlineCode",{parentName:"li"},"unsigned char"),'"'),Object(r.b)("li",{parentName:"ul"},"access the 4 byte values in memory starting at the address that ",Object(r.b)("inlineCode",{parentName:"li"},"p")," points to"),Object(r.b)("li",{parentName:"ul"},'prints each byte value in hexadecimal ("',Object(r.b)("inlineCode",{parentName:"li"},"print/x"),'" means "print in hexadecimal")')),Object(r.b)("p",null,"These ",Object(r.b)("inlineCode",{parentName:"p"},"gdb")," commands are a good illustration of how ",Object(r.b)("inlineCode",{parentName:"p"},"gdb")," can inspect arbitrary\nmemory locations as your program runs, and let you know exactly what is stored\nat those locations.  ",Object(r.b)("inlineCode",{parentName:"p"},"gdb")," is extremely cool!"),Object(r.b)("p",null,"Based on your investigation, is the computer you are running the ",Object(r.b)("inlineCode",{parentName:"p"},"endian")," program\non big endian or little endian?"))}b.isMDXComponent=!0}}]);