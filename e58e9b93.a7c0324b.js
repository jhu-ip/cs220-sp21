(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{120:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),i=(n(0),n(131)),o={id:"ex9-1",title:"Exercise 9-1"},c={unversionedId:"exercises/ex9-1",id:"exercises/ex9-1",isDocsHomePage:!1,title:"Exercise 9-1",description:"As you work, feel free to discuss with other students and ask questions",source:"@site/docs/exercises/ex9-1.md",slug:"/exercises/ex9-1",permalink:"/cs220-sp21/docs/exercises/ex9-1",version:"current"},l=[{value:"Processing and analyzing text",id:"processing-and-analyzing-text",children:[{value:"Part 1",id:"part-1",children:[]},{value:"Part 2",id:"part-2",children:[]},{value:"Part 3",id:"part-3",children:[]}]}],b={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"As you work, feel free to discuss with other students and ask questions\nof the Professor/CAs. Aim to complete as much as possible during our\nmeeting time. Work at home to complete what you do not get through during\nclass. You will not hand in your work."))),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Get started by running ",Object(i.b)("inlineCode",{parentName:"p"},"git pull")," to update your clone of the public\nrepository, and then copying the ",Object(i.b)("inlineCode",{parentName:"p"},"exercises/ex9-1")," directory into your\npersonal git repository."))),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Learning Objectives")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Reinforces basic C++ concepts"),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"C++ basics: file I/O using ",Object(i.b)("inlineCode",{parentName:"li"},"istream")," and ",Object(i.b)("inlineCode",{parentName:"li"},"ostream"),", ",Object(i.b)("inlineCode",{parentName:"li"},"string")," manipulation"),Object(i.b)("li",{parentName:"ul"},"Using ",Object(i.b)("inlineCode",{parentName:"li"},"stringstream")," to extract data from a string")))),Object(i.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"Goal")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Implement programs to abbreviate words in a text document, analyze\ntokens in a text document, and analyze a text document to find the\nrelative frequencies letters."))),Object(i.b)("h2",{id:"processing-and-analyzing-text"},"Processing and analyzing text"),Object(i.b)("p",null,"In this exercise you will write programs and functions to manipulate\nand transform text using the ",Object(i.b)("inlineCode",{parentName:"p"},"string")," and ",Object(i.b)("inlineCode",{parentName:"p"},"stringstream")," classes, and\nread and write text files using ",Object(i.b)("inlineCode",{parentName:"p"},"ifstream")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ofstream"),"."),Object(i.b)("p",null,'The exercise has two "required" parts, ',Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#part-1"}),"Part 1")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#part-2"}),"Part 2"),',\nand one "optional" part, ',Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#part-3"}),"Part 3"),"."),Object(i.b)("h3",{id:"part-1"},"Part 1"),Object(i.b)("p",null,'Words are often recognizable when one or more of the vowels ("a", "e", "i", "o",\nand "u") are omitted.  For example:'),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"W'rds 'r' 'ft'n r'c'gn'z'bl' wh'n 'n' 'r m'r' 'f th' v'w'ls 'r' 'm'tt'd.")),Object(i.b)("p",null,"In this transformed sentence, each vowel or consecutive group of vowels has\nbeen replaced with an apostrophe (",Object(i.b)("inlineCode",{parentName:"p"},"'"),") character.  It's a bit difficult to\nread, but not impossible.  To test the theory that text abbreviated this way\nis still readable, you will write a program to automatically abbreviate text."),Object(i.b)("p",null,"Complete the program in ",Object(i.b)("inlineCode",{parentName:"p"},"abbrev.cpp")," as follows.  The program takes two\ncommand line arguments.  The first is the name of an input file, which will\ncontain the input text.  The second is the name of the output file to\ngenerate, containing the abbreviated form of the original text."),Object(i.b)("p",null,"Compile the program using the command"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"g++ -g -std=c++11 -Wall -Wextra -pedantic abbrev.cpp -o abbrev\n")),Object(i.b)("p",null,"Example usage:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"./abbrev example1.txt example1-abbrev.txt\n")),Object(i.b)("p",null,"As you work, the documentation for the ",Object(i.b)("inlineCode",{parentName:"p"},"string")," class will be useful:\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.cplusplus.com/reference/string/string/"}),"http://www.cplusplus.com/reference/string/string/")),Object(i.b)("p",null,"Three example files are provided, ",Object(i.b)("inlineCode",{parentName:"p"},"example1.txt"),", ",Object(i.b)("inlineCode",{parentName:"p"},"example2.txt"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"example3.txt"),".\nThe expected results of abbreviating the text in each file are in the files\n",Object(i.b)("inlineCode",{parentName:"p"},"example1-expected.txt"),", ",Object(i.b)("inlineCode",{parentName:"p"},"example2-expected.txt"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"example3-expected.txt"),".\nYou can check your program's output using the ",Object(i.b)("inlineCode",{parentName:"p"},"diff")," command, e.g. (assuming that\nyour transformed version of ",Object(i.b)("inlineCode",{parentName:"p"},"example1.txt")," is called ",Object(i.b)("inlineCode",{parentName:"p"},"example1-abbrev.txt"),"):"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"diff -w example1-expected.txt expected1-abbrev.txt\n")),Object(i.b)("p",null,"If the ",Object(i.b)("inlineCode",{parentName:"p"},"diff")," command produces no output, then your output matches the expected\noutput."),Object(i.b)("p",null,"Here are some hints and suggestions."),Object(i.b)("p",null,"You can read the input file line by line using the ",Object(i.b)("inlineCode",{parentName:"p"},"getline")," function,\nwhich reads a line of text from an ",Object(i.b)("inlineCode",{parentName:"p"},"istream")," (including an ",Object(i.b)("inlineCode",{parentName:"p"},"ifstream"),")\ninto a ",Object(i.b)("inlineCode",{parentName:"p"},"string")," object.  Your main loop might look something like this\n(assuming that ",Object(i.b)("inlineCode",{parentName:"p"},"in")," is an ",Object(i.b)("inlineCode",{parentName:"p"},"ifstream")," reading from the input file):"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"string line;\nwhile (getline(in, line)) {\n  // do something with line\n}\n")),Object(i.b)("p",null,"To read words from a line, creating a ",Object(i.b)("inlineCode",{parentName:"p"},"stringstream")," from one line of text\nand then reading one word at a time can be accomplished as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"stringstream ss(line);\nstring word;\nwhile (ss >> word) {\n  // do something with word\n}\n")),Object(i.b)("p",null,"Defining a function with the following prototype will probably be a good idea:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"string abbreviate(const string &word);\n")),Object(i.b)("p",null,"You should use an ",Object(i.b)("inlineCode",{parentName:"p"},"ofstream")," to write the output file."),Object(i.b)("h3",{id:"part-2"},"Part 2"),Object(i.b)("p",null,"One useful technique enabled by the ",Object(i.b)("inlineCode",{parentName:"p"},"stringstream")," class is the capability\nto dynamically check a string to determine if it contains data in a particular\nform (integer value, floating point value, etc.)"),Object(i.b)("p",null,"Complete the program in ",Object(i.b)("inlineCode",{parentName:"p"},"classify.cpp")," so that it reads textual input from ",Object(i.b)("inlineCode",{parentName:"p"},"cin"),"\none token at a time, and then prints the following summary information:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"the sum of all floating point values found in the input"),Object(i.b)("li",{parentName:"ul"},"the sum of all integer values found in the input"),Object(i.b)("li",{parentName:"ul"},"the number of tokens (words) in the input that weren't numeric"),Object(i.b)("li",{parentName:"ul"},"the total length of all tokens in the input that weren't numeric")),Object(i.b)("p",null,"A token should be considered a floating point value if a ",Object(i.b)("inlineCode",{parentName:"p"},"double")," value can be\nsuccessfully extracted from it using a ",Object(i.b)("inlineCode",{parentName:"p"},"stringstream"),"."),Object(i.b)("p",null,"A token should be considered an integer value if it is not a floating point value,\nbut an ",Object(i.b)("inlineCode",{parentName:"p"},"int")," value can be successfully extracted from it using a ",Object(i.b)("inlineCode",{parentName:"p"},"stringstream"),",\nsuch that the entire string is matched.  For example, the string ",Object(i.b)("inlineCode",{parentName:"p"},'"3.14159"')," could\nbe extracted into an ",Object(i.b)("inlineCode",{parentName:"p"},"int")," variable, but only the ",Object(i.b)("inlineCode",{parentName:"p"},"3")," character would be matched,\nleaving the remaining text (",Object(i.b)("inlineCode",{parentName:"p"},'".14159"'),") unmatched."),Object(i.b)("p",null,"All tokens that aren't floating point or integer should be considered non-numeric."),Object(i.b)("p",null,"Compile the program using the command"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"g++ -g -std=c++11 -Wall -Wextra -pedantic classify.cpp -o classify\n")),Object(i.b)("p",null,"You can test your program by running the command"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"./classify < data.txt\n")),Object(i.b)("p",null,"The output should be something like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Floating point sum: 387.542\nInteger sum: 8\nNumber of non-numeric tokens: 24\nNumber of characters in non-numeric tokens: 114\n\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Hint:")," one way to determine if an extraction of an integer value from a ",Object(i.b)("inlineCode",{parentName:"p"},"stringstream"),"\nconsumed the entire string is, after the ",Object(i.b)("inlineCode",{parentName:"p"},"int")," value is extracted successfully,\nto attempt to extract a ",Object(i.b)("inlineCode",{parentName:"p"},"string"),".  If the extraction of the ",Object(i.b)("inlineCode",{parentName:"p"},"string")," value fails,\nthen you know that the extraction of the ",Object(i.b)("inlineCode",{parentName:"p"},"int")," value consumed the entire original string."),Object(i.b)("h3",{id:"part-3"},"Part 3"),Object(i.b)("p",null,"Note that this part is optional!  It's a good opportunity to practice working\nwith input files, STL containers, and STL algorithms, but it's not essential."),Object(i.b)("p",null,"Complete the program in ",Object(i.b)("inlineCode",{parentName:"p"},"letter_freq.cpp"),' so that it counts the number of occurrences\nof each letter in the input text file specified as the command line argument.\nThe program should ignore case, so (for example) "',Object(i.b)("inlineCode",{parentName:"p"},"A"),'" and "',Object(i.b)("inlineCode",{parentName:"p"},"a"),'" are considered the\nsame letter.'),Object(i.b)("p",null,"After analyzing the input file, the program should print a table with the\nnumber of ocurrences of each letter, in the order from most-frequently occurring\nto least-frequently occurring.  For example, the invocation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"./letter_freq example2.txt\n")),Object(i.b)("p",null,"should produce the output"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"e: 107\ni: 80\nt: 76\nn: 62\no: 62\na: 57\nr: 56\ns: 53\nh: 51\nl: 45\nm: 30\nu: 26\np: 25\ng: 24\nf: 22\ny: 22\nd: 21\nc: 18\nw: 17\nv: 13\nb: 9\nk: 4\nq: 2\nz: 2\n")),Object(i.b)("p",null,"As the data structure for recording the occurrence count of each letter, use a ",Object(i.b)("inlineCode",{parentName:"p"},"vector"),"\nof ",Object(i.b)("inlineCode",{parentName:"p"},"Bucket")," elements, where ",Object(i.b)("inlineCode",{parentName:"p"},"Bucket")," is a struct defined something like the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"struct Bucket {\n  char letter;\n  unsigned count;\n};\n")),Object(i.b)("p",null,"The vector should have one ",Object(i.b)("inlineCode",{parentName:"p"},"Bucket")," per letter."),Object(i.b)("p",null,"The program's main loop should read characters from the input file one at\na time.  The ",Object(i.b)("inlineCode",{parentName:"p"},"get")," member function should be useful.  For example, if ",Object(i.b)("inlineCode",{parentName:"p"},"in"),"\nis an ",Object(i.b)("inlineCode",{parentName:"p"},"ifstream")," reading from the input file, the main loop might look\nsomething like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"char c;\nwhile (in.get(c)) {\n  // do something with c\n}\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"<cctype>")," header is included, so that you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"isalpha"),",\n",Object(i.b)("inlineCode",{parentName:"p"},"toupper")," and/or ",Object(i.b)("inlineCode",{parentName:"p"},"tolower")," functions.  Your program will need to know\nwhich characters are letters, and then convert each letter to a consistent\ncase (upper or lower), in order to know which bucket to update when\na letter is encountered."),Object(i.b)("p",null,"Before printing the output, you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"std::sort")," algorithm to\nsort the vector elements so that they are arranged from most-frequently\noccurring to least-frequently occurring.  To do this, implement a function\nwith the following signature:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"bool compare_buckets(const Bucket &left, const Bucket &right);\n")),Object(i.b)("p",null,"The function should return ",Object(i.b)("inlineCode",{parentName:"p"},"true")," if the ",Object(i.b)("inlineCode",{parentName:"p"},"left")," bucket should be before\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"right")," bucket.  If two buckets have the same count, then the one with\nthe earlier letter should come first."),Object(i.b)("p",null,"To sort the vector:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"sort(hist.begin(), hist.end(), compare_buckets);\n")),Object(i.b)("p",null,"This code assumes that your ",Object(i.b)("inlineCode",{parentName:"p"},"vector")," of ",Object(i.b)("inlineCode",{parentName:"p"},"Bucket")," elements is  called ",Object(i.b)("inlineCode",{parentName:"p"},"hist"),"."))}p.isMDXComponent=!0},131:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),s=p(n),u=a,d=s["".concat(o,".").concat(u)]||s[u]||m[u]||i;return n?r.a.createElement(d,c(c({ref:t},b),{},{components:n})):r.a.createElement(d,c({ref:t},b))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);